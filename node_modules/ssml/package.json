{
  "name": "ssml",
  "version": "0.0.2",
  "description": "a SSML document builder for node.js",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ssml",
    "voice",
    "tts",
    "speech"
  ],
  "author": {
    "name": "TheFuzzy"
  },
  "license": "MIT",
  "dependencies": {
    "xmlbuilder": "~2.1.0",
    "underscore": "~1.5.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TheFuzzy/node-ssml.git"
  },
  "readme": "# node-ssml\n[![NPM](https://nodei.co/npm/ssml.png)](https://nodei.co/npm/ssml/)\n\nA Node.js library for producing SSML (Speech Synthesis Markup Language) according to specifications.\n\nCurrently, this library only implements [SSML 1.0](http://www.w3.org/TR/speech-synthesis/).\nThe documentation also assumes that the reader has at least *skimmed* through the specification.\n\nAs of v0.0.2, only the following elements of SSML are supported:\n\n* say-as\n* prosody\n* audio\n* break\n* sub\n\n## Basic Usage\n\nThis library makes use of method chaining for convenience.\n\n```javascript\nvar ssml = require('ssml');\nvar ssmlDoc = new ssml();\n\nssmlDoc.say('This is a great voice application!')\n    .break(500)\n    .prosody({ rate: '0.8' })\n    .say('Awkward pause')\n    .toString({ pretty: true });\n```\n\nOutput:\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tThis is a great voice application!\n\t<break time=\"500ms\"/>\n\t<prosody rate=\"0.8\">Awkward pause</prosody>\n</speak>\n```\n\nXML output examples in the later section assume `pretty` is set to true for the `toString()` function (described later), for easier reading.\n\n## Initialization\n\nSimply initialize a document instance as follows:\n\n```javascript\nvar ssml = require('ssml');\n...\nvar ssmlDoc = new ssml()\n```\n\nThe document is initialized with language set to `en-US` by default. To use a different language, specify it in the `lang` parameter:\n\n```javascript\nvar ssmlDoc = new ssml({ lang: 'fr-FR' });\n...\nssmlDoc.toString()\n```\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"fr-FR\">\n...\n```\n\n## Elements\n\nNote that all functions, including elements, are object-based, and not static.\n\n### say(text[, options]) / say(options)\n\nProduces basic text output. Usage is as follows:\n\n```javascript\nssmlDoc.say('I am talking to you.');\n```\n\nThe text string can also be described by the `text` parameter.\n\n`intepretAs` can also be specified as an additional parameter, but will encapsulate the text-output into a `say-as` element. More parameters can be specified for the `say-as` element, only *if* `intepretAs` is used:\n\n* `format`\n* `detail`\n\nTheir respective purposes can be found in [the specification](http://www.w3.org/TR/ssml-sayas/).\n\nExample:\n\n```javascript\nssmlDoc.say('The time now is ')\n    .say({\n        text: '01:59:59',\n        intepretAs: 'telephone',\n        format: 'hms24'\n    })\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tThe time now is \n\t<say-as interpret-as=\"time\" format=\"hms24\">01:59:59</say-as>\n</speak>\n```\n\n### break(time[, options]) / break(options)\n\nRepresents a pause in the speech. Accepts one of the following parameters:\n\n* `time` - Can be a string or number. If passed as a number, it will be converted to a string automatically, and appended with `ms`. Will override `strength` if defined.\n* `strength` - A string value that describes the length of time in a human-readable form i.e. `weak`, `medium`, `strong`.\n\n`time` may also be defined as the first parameter of the `break` function for convenience, i.e.:\n\n```javascript\n.break(500) // 500ms\n```\n\nAdditional information on these parameters can be found in [the specification](http://www.w3.org/TR/speech-synthesis/#edef_break).\n\nExample:\n\n```javascript\nssmlDoc.say('It\\'s time for an awkward pause!')\n    .break({\n        time: '5s',\n        strength: 'strong'\n    })\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tIt's time for an awkward pause!\n\t<break time=\"5s\"/>\n</speak>\n```\n\n### prosody(options)\n\nRepresents a speech adjustment. Any element contained in a `prosody` element will receive the adjustments described by its parameters.\n\n`prosody` also switches the internal context of the SSML document, so that further element calls will render elements within the `prosody` element. Use `up()`(covered later) to reset the context to the previous level.\n\nAccepts any of the following parameters, alone or in combination:\n\n* `pitch` - A string or number that controls the pitch of the spoken text. If a number is supplied, `Hz` will be appended to the output.\n* `rate` - A string or number that controls the speed of the spoken text.\n* `range` - A string or number that controls the pitch range of the spoken text. If a number is supplied, `Hz` will be appended to the output.\n* `volume` - A string or number that controls the volume of the spoken text.\n* `contour` - a string containing a set of values to finely tune the pitch of the spoken text.\n\nAdditional information on these parameters can be found in [the specification](http://www.w3.org/TR/speech-synthesis/#edef_prosody).\n\nExample:\n\n```javascript\n// Produce a sarcastic apology.\nssmlDoc.say('I\\'m ')\n    .prosody({\n        rate: '0.6',\n        pitch: '-50%'\n    })\n    .say('sorry')\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tI'm \n\t<prosody pitch=\"-50% rate=\"0.6\">sorry</prosody>\n</speak>\n```\n\n### audio(src[, options]) / audio(options)\n\nRepresents an audio resource. Accepts the following parameters:\n\n* `src` or `source` - The URI pointing to a valid audio resource. Required.\n* `alt` - A string that is rendered by the speech processor if the audio resource cannot be found. Optional.\n\n`src` may also be defined as the first parameter of the `audio` function for convenience, i.e.:\n\n```javascript\n.audio('http://yourdomain.com/audio.mp3')\n```\n\nAdditional information on these parameters can be found in [the specification](http://www.w3.org/TR/speech-synthesis/#edef_audio).\n\nExample:\n\n```javascript\n// Rickroll the guy.\nssmlDoc.audio({\n        src: 'http://music.com/Never Gonna Give You Up.mp3',\n        alt: 'For some reason that didn\\'t work. Oh well.'\n    })\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\t<audio src=\"http://music.com/Never Gonna Give You Up.mp3\">For some reason that didn't work. Oh well.</audio>\n</speak>\n```\n\n## Helper functions\n\n### up()\n\nThis function sets the internal context to the previous level in XML. If there is no previous level, the function does nothing.\n\nNote that as of v0.0.2, this is a mutable operation affecting the SSML document object, and cannot be reversed.\n\nExample:\n\n```javascript\n// Mock the user\nssmlDoc.say('Now, now.')\n    .prosody({ rate: '0.8' })\n    .say('There\\'s no need to be upset.')\n    .up()\n    .say('We\\'ll be just fine!')\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tNow, now.\n\t<prosody rate=\"0.8\">There's no need to be upset.</prosody>\n\tWe'll be just fine!\n</speak>\n```\n\n### clear()\n\nThis function clears all elements from the SSML document object.\n\n### replace(wordToReplace, replaceWith) / replace(keyValues)\n\nThis function replaces all instances of the word(s) with another word/set of words. These can be passed in as the first and second parameters for a single key-value pair, or as an object containing key-value pairs. The words will then be added to an internal dictionary and processed only when `toString()` is called.\n\nNote that the `replace` function is case-sensitive, and does not modify the original text.\n\nThe replaced words will still be rendered, but wrapped in a `sub` element. Additional information about this element can be found in [the specification](http://www.w3.org/TR/speech-synthesis/#edef_sub).\n\nExample:\n\n```javascript\nssmlDoc.replace('balls of fire', 'suns above')\n    .say('Great balls of fire! The time has arrived, and thus have I!')\n    .addReplace({\n        'arrived' : 'come',\n        'thus' : 'so'\n    })\n    .say('Thus, we\\'ll commence the operation!')\n    .toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">\n\tGreat <sub alias=\"suns above\">balls of fire</sub>! The time has <sub alias=\"come\">arrived</sub>, and <sub alias=\"so\">thus</sub> have I!\n\tAnd <sub alias=\"so\">thus</sub>, we'll commence the operation!\n</speak>\n```\n\n### addReplace(wordToReplace, replaceWith) / replace(keyValues)\n\nAlias for `replace`.\n\n### removeReplace(key)\n\nThis function removes the key from the internal dictionary. If an array of strings is provided, all keys matching the elements in the array will be removed.\n\n### clearReplace()\n\nClears all keys from the internal dictionary.\n\n## Output\n\n### toString(options)\n\nRenders the SSML document as a string, which can be passed to the speech processor through a suitable medium later.\n\nAccepts the following parameters:\n\n* `minimal` - setting this to true renders a `speak` XML root element with no properties (including required properties such as `xml:lang`) or XML header. Takes priority over `full`.\n* `full` - setting this to true renders a `speak` XML root element with required *and* optional properties.\n\nAdditionally, as the `xmlbuilder` library is being used, the options object may also contain any parameters suitable for the `toString()` method, such as `pretty` or `indent`. Refer to the `xmlbuilder` [documentation](https://github.com/oozcitak/xmlbuilder-js/wiki) for details.\n\nExamples:\n\n```javascript\nssmlDoc.toString();\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\">Hello there!</speak>\n```\n\n```javascript\nssmlDoc.toString({ full:true, minimal: true });\n```\n\nOutput:\n\n```xml\n<speak>Hello there!</speak>\n```\n\n```javascript\nssmlDoc.toString({ full:true });\n```\n\nOutput:\n\n```xml\n<?xml version=\"1.0\">\n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" version=\"1.0\" xml:lang=\"en-US\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/TR/speech-synthesis/synthesis.xsd\">Hello there!</speak>\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TheFuzzy/node-ssml/issues"
  },
  "homepage": "https://github.com/TheFuzzy/node-ssml",
  "_id": "ssml@0.0.2",
  "dist": {
    "shasum": "7833c8b5eecbfe32030ff61e737f01bd696feb3a"
  },
  "_from": "ssml@",
  "_resolved": "https://registry.npmjs.org/ssml/-/ssml-0.0.2.tgz"
}
